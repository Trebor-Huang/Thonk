open import Data.Vec.Functional using ([]; _โท_)
open import Data.Nat using (โ; zero; suc)
open import Data.Fin using (Fin) renaming (zero to fzero; suc to fsuc)
open import Data.Maybe using (Maybe; just; nothing)
open import Agda.Builtin.Equality using (_โก_; refl)
open import Relation.Binary using (Decidable)
open import Relation.Nullary using (yes; no)

module Thonk where
open import Constructor

-- Defines the constructors. ๐ค
data รโบ : Set where
    unit : รโบ
    pair : รโบ
    inl : รโบ
    inr : รโบ
    flat : รโบ
    muโบ : รโบ  -- TODO functions

_โโบ_ : Decidable {A = รโบ} _โก_
unit โโบ unit = yes refl
pair โโบ pair = yes refl
inl โโบ inl = yes refl
inr โโบ inr = yes refl
flat โโบ flat = yes refl
muโบ โโบ muโบ = yes refl
unit โโบ pair = no \ ()
unit โโบ inl = no \ ()
unit โโบ inr = no \ ()
unit โโบ flat = no \ ()
unit โโบ muโบ = no \ ()
pair โโบ unit = no \ ()
pair โโบ inl = no \ ()
pair โโบ inr = no \ ()
pair โโบ flat = no \ ()
pair โโบ muโบ = no \ ()
inl โโบ unit = no \ ()
inl โโบ pair = no \ ()
inl โโบ inr = no \ ()
inl โโบ flat = no \ ()
inl โโบ muโบ = no \ ()
inr โโบ unit = no \ ()
inr โโบ pair = no \ ()
inr โโบ inl = no \ ()
inr โโบ flat = no \ ()
inr โโบ muโบ = no \ ()
flat โโบ unit = no \ ()
flat โโบ pair = no \ ()
flat โโบ inl = no \ ()
flat โโบ inr = no \ ()
flat โโบ muโบ = no \ ()
muโบ โโบ unit = no \ ()
muโบ โโบ pair = no \ ()
muโบ โโบ inl = no \ ()
muโบ โโบ inr = no \ ()
muโบ โโบ flat = no \ ()

data รโป : Set where
    counit : รโป
    copair : รโป
    projl : รโป
    projr : รโป
    sharp : รโป
    muโป : รโป

_โโป_ : Decidable {A = รโป} _โก_
counit โโป counit = yes refl
copair โโป copair = yes refl
projl โโป projl = yes refl
projr โโป projr = yes refl
sharp โโป sharp = yes refl
muโป โโป muโป = yes refl
counit โโป copair = no \ ()
counit โโป projl = no \ ()
counit โโป projr = no \ ()
counit โโป sharp = no \ ()
counit โโป muโป = no \ ()
copair โโป counit = no \ ()
copair โโป projl = no \ ()
copair โโป projr = no \ ()
copair โโป sharp = no \ ()
copair โโป muโป = no \ ()
projl โโป counit = no \ ()
projl โโป copair = no \ ()
projl โโป projr = no \ ()
projl โโป sharp = no \ ()
projl โโป muโป = no \ ()
projr โโป counit = no \ ()
projr โโป copair = no \ ()
projr โโป projl = no \ ()
projr โโป sharp = no \ ()
projr โโป muโป = no \ ()
sharp โโป counit = no \ ()
sharp โโป copair = no \ ()
sharp โโป projl = no \ ()
sharp โโป projr = no \ ()
sharp โโป muโป = no \ ()
muโป โโป counit = no \ ()
muโป โโป copair = no \ ()
muโป โโป projl = no \ ()
muโป โโป projr = no \ ()
muโป โโป sharp = no \ ()

open Constructors

รง : Constructors รโบ รโป
โโบ รง unit = ๐ 0 []
โโบ รง pair = ๐ 2 (โ โบ โท โ โบ โท [])
โโบ รง inl = ๐ 1 (โ โบ โท [])
โโบ รง inr = ๐ 1 (โ โบ โท [])
โโบ รง flat = ๐ 1 (โ โป โท [])
โโบ รง muโบ = ๐ 1 (โ โบ โท [])
โโป รง counit = ๐ 0 []
โโป รง copair = ๐ 2 (โ โป โท โ โป โท [])
โโป รง projl = ๐ 1 (โ โป โท [])
โโป รง projr = ๐ 1 (โ โป โท [])
โโป รง sharp = ๐ 1 (โ โบ โท [])
โโป รง muโป = ๐ 1 (โ โป โท [])

import Pattern
import Syntax
open Pattern รโบ รโป รง _โโบ_ _โโป_ public
open Syntax รโบ รโป รง _โโบ_ _โโป_ public


